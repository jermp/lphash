#include "../include/constants.hpp"
#include <argparse/argparse.hpp>

namespace lphash {

argparse::ArgumentParser get_parser_build() {
    argparse::ArgumentParser parser("build");
    parser.add_description("build a LP-MPHF");
    parser.add_argument("-i", "--input-filename")
        .help("Must be a FASTA file (.fa/fasta extension) compressed with gzip (.gz) or not:\n\t- without duplicate nor invalid kmers\n\t- one DNA sequence per line.\n\tFor example, it could be the de Bruijn graph topology output by BCALM.")
        .required();
    parser.add_argument("-k")
        .help("k-mer length (must be < " + std::to_string(constants::max_k) + ")")
        .scan<'u', uint64_t>()
        .required();
    parser.add_argument("-m")
        .help("minimizer length ( < min(k, 32))")
        .scan<'u', uint64_t>()
        .required();
    parser.add_argument("-s", "--seed")
        .help("Seed for minimizer computation [" + std::to_string(constants::default_seed) + "]")
        .scan<'u', uint64_t>()
        .default_value(uint64_t(constants::default_seed));
    parser.add_argument("-S", "--pthash-seed")
        .help("Seed for internal pthash MPHF [" + std::to_string(constants::default_pthash_seed) + "]")
        .scan<'u', uint64_t>()
        .default_value(uint64_t(constants::default_pthash_seed));
    parser.add_argument("-t", "--threads")
        .help("number of threads used by pthash (default is " + std::to_string(constants::default_num_threads) + ")")
        .scan<'u', uint64_t>()
        .default_value(uint64_t(constants::default_num_threads));
    parser.add_argument("-o", "--output-filename")
        .help("Output file name where the data structure will be serialized (no files generated by default)")
        .default_value("");
    parser.add_argument("-d", "--tmp-dir")
        .help("Temporary directory used for construction in external memory (default is directory '" + constants::default_tmp_dirname + "')")
        .default_value(constants::default_tmp_dirname);
    parser.add_argument("-c")
        .help("A (floating point) constant that trades construction speed for space effectiveness of the minimizer's MPHF.\n\tA reasonable value lies between 3.0 and 10.0 [" + std::to_string(constants::c) + "]")
        .scan<'g', double>()
        .default_value(double(constants::c));
    parser.add_argument("--max-memory")
        .help("Maximum internal memory in GB for building [8]. Use external memory if needed.")
        .scan<'u', uint64_t>()
        .default_value(uint64_t(8));
    parser.add_argument("--check")
        .help("Check correctness after construction (disabled by default).")
        .implicit_value(true)
        .default_value(false);
    parser.add_argument("--verbose")
        .help("Verbose output during construction (disabled by default).")
        .implicit_value(true)
        .default_value(false);
    return parser;
}

}  // namespace lphash